<?php

/**
 * This is the model base class for the table "inv_vendor_info".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "InvVendorInfo".
 *
 * Columns in table "inv_vendor_info" available as properties of the model,
 * followed by relations of table "inv_vendor_info" available as properties of the model.
 *
 * @property integer $vendor_id
 * @property string $vendor_name
 * @property string $street_address
 * @property string $city
 * @property string $state_address
 * @property string $country_code
 * @property string $zip_code
 * @property string $phone_number
 * @property string $mobile_phone
 * @property string $contact_name
 *
 * @property InvPoInfo[] $invPoInfos
 * @property InvItemInfo[] $invItemInfos
 */
abstract class BaseInvVendorInfo extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'inv_vendor_info';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'InvVendorInfo|InvVendorInfos', $n);
	}

	public static function representingColumn() {
		return 'vendor_name';
	}

	public function rules() {
		return array(
			array('vendor_name, city, mobile_phone, contact_name', 'required'),
			array('vendor_name, city, phone_number, mobile_phone', 'length', 'max'=>20),
			array('street_address', 'length', 'max'=>100),
			array('state_address, zip_code', 'length', 'max'=>10),
			array('country_code', 'length', 'max'=>2),
			array('contact_name', 'length', 'max'=>50),
			array('street_address, state_address, country_code, zip_code, phone_number', 'default', 'setOnEmpty' => true, 'value' => null),
			array('vendor_id, vendor_name, street_address, city, state_address, country_code, zip_code, phone_number, mobile_phone, contact_name', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'invPoInfos' => array(self::HAS_MANY, 'InvPoInfo', 'vendor_id'),
			'invItemInfos' => array(self::MANY_MANY, 'InvItemInfo', 'inv_vendor_item_info(vendor_id, item_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'invItemInfos' => 'InvVendorItemInfo',
		);
	}

	public function attributeLabels() {
		return array(
			'vendor_id' => Yii::t('app', 'Vendor'),
			'vendor_name' => Yii::t('app', 'Vendor Name'),
			'street_address' => Yii::t('app', 'Street Address'),
			'city' => Yii::t('app', 'City'),
			'state_address' => Yii::t('app', 'State Address'),
			'country_code' => Yii::t('app', 'Country Code'),
			'zip_code' => Yii::t('app', 'Zip Code'),
			'phone_number' => Yii::t('app', 'Phone Number'),
			'mobile_phone' => Yii::t('app', 'Mobile Phone'),
			'contact_name' => Yii::t('app', 'Contact Name'),
			'invPoInfos' => null,
			'invItemInfos' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('vendor_id', $this->vendor_id);
		$criteria->compare('vendor_name', $this->vendor_name, true);
		$criteria->compare('street_address', $this->street_address, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state_address', $this->state_address, true);
		$criteria->compare('country_code', $this->country_code, true);
		$criteria->compare('zip_code', $this->zip_code, true);
		$criteria->compare('phone_number', $this->phone_number, true);
		$criteria->compare('mobile_phone', $this->mobile_phone, true);
		$criteria->compare('contact_name', $this->contact_name, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}